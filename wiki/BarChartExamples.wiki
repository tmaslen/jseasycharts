#Bar Chart Examples

== Basic bar chart ==

You can use the API with very minimal settings. You can create a chart with just a reference to a parent element and an array of values, like so:

{{{
jsEasyCharts.bar(
        'bar1',
        [60,40,10]
);
}}}

[http://chart.apis.google.com/chart?chs=100x100&chd=t:60,40,10&cht=bhs&&chco=&&chds=,140&foo=.png]

== Setting data with JSON, sizing and colouring ==

As well as defining the data for the chart as an array, you can also pass in a JSON object. If you do this, the labels in the JSON object will be used in the chart. Note that if labels are supplied for the chart, then axis labels will be added also.

A third optional param in the method call is an options object. Here you can set the size and colouring of the chart.

{{{
jsEasyCharts.bar(
        'bar4',
        {
                Apricots: 10,
                Walnuts: 20,
                Hazelnut: 30,
                Almond: 40
        },
        {
                colour: 'ff0000',
                size: '110x110'
        }
);
}}}

[http://chart.apis.google.com/chart?chs=300x150&chd=t:10,20,30,40&cht=bhs&chxl=0:|Apricots|Walnuts|Hazelnut|Almond&chco=99cc00&chxt=y,x&chds=,140&foo=.png]

== Defining labels and setting data with a HTML table ==

You can define the data for the chart using a (2 row/column only) table. The options object also allows you to override the labels (from the data source) and set axis labels for the chart.

{{{
jsEasyCharts.bar(
        'bar3',
        'dataBar3',
        {
                type: 'horizontal',
                size: '200x120',
                labels: ['Lib Dem', 'Lab', 'Con'],
                axisLabels: ['0%', '25%', '50%', '75%', '100%']
        }
);
}}}

[http://chart.apis.google.com/chart?chs=200x120&chd=t:33,16,20|33,16,20&cht=bhs&chxl=0:|Lib%20Dem|Lab|Con|1:|0%|25%|50%|75%|100%&chco=&chxt=y,x&chds=,140&foo=.png]

== Vertical bar chart ==

The third param in the method call is an options object. Here you can set the type of chart and also the width and spacing of the bars. Setting the width and spacing of the bars is useful if the labels are wider than the bars.

{{{
jsEasyCharts.bar(
        'bar2',
        {
                Apricots: 10,
                Walnuts: 20,
                Hazelnut: 30,
                Almond: 40
        },
        {
                type: 'vertical',
                size: '450x200'
                barWidth: 20,
                barSpacing: 30
        }
);
}}}

[http://chart.apis.google.com/chart?chs=250x150&chd=t:30,10,40,20&cht=bvs&chxl=0:|Hazelnut|Apricots|Almond|Walnuts&chco=&chxt=x,y&chds=,140&chbh=20,30&foo=.png]

== Data scaling a bar chart ==

By default the values that you can enter range from 0 - 100. Google Charts will ignore any value you enter which is less than 0, and cap any values higher than 100 at 100. You can override this behaviour with the use of the dataScaling parameter in the options object.

{{{
jsEasyCharts.bar(
        'bar5',
        {
                November: 80,
                December: -70,
                January: 120,
                Febuary: -40
        },
        {
                type: 'vertical',
                size: '250x300',
                barWidth: 50,
                barSpacing: 5,
                dataScaling: {
                        top: 140, 
                        bottom: -80
                },
                axisLabels: ['-80', '-60', '-40', '-20', '0', '20', 
                            '40', '60', '80', '100', '120', '140']
        }
);
}}}

[http://chart.apis.google.com/chart?chs=250x300&chd=t:80,-70,120,-40&cht=bvs&chxl=0:|November|December|January|Febuary|1:|-80|-60|-40|-20|0|20|40|60|80|100|120|140&chco=&chxt=x,y&chds=,140&chbh=50,5&chds=-80,140&foo=.png]